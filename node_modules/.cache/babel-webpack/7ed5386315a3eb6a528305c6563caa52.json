{"ast":null,"code":"import _asyncToGenerator from \"/Users/homero/fereg-call/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { SoundMeter } from '../../../core/sound-meter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/media.service\";\nimport * as i2 from \"@angular/common\";\n\nconst _c0 = function (a0) {\n  return {\n    \"height.px\": a0\n  };\n};\n\nfunction SoundVisualizerComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"div\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const value_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(1, _c0, value_r1));\n  }\n}\n\nconst bars = 4;\nexport class SoundVisualizerComponent {\n  constructor(mediaService) {\n    this.mediaService = mediaService;\n    this.values = new Array(bars);\n    this.index = 0;\n    this.lastValue = 0;\n    this.values.fill(3);\n  }\n\n  set mediaStream(value) {\n    if (value) {\n      this.connect(value);\n    }\n  }\n\n  ngOnInit() {}\n\n  connect(stream) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.soundMeter = new SoundMeter(new AudioContext());\n\n      _this.soundMeter.connect(stream, instant => _this.updateVisualizer(instant), error => {\n        if (error) {\n          console.error('sound meter error: ', error.message, error.name);\n        }\n      });\n    })();\n  }\n\n  ngOnDestroy() {\n    if (this.soundMeter) {\n      this.soundMeter.context.close();\n    }\n  }\n\n  updateVisualizer(value) {\n    if (value !== this.lastValue) {\n      this.index++;\n\n      if (this.index > bars - 1) {\n        this.index = 0;\n      }\n\n      this.values[this.index] = Math.floor(value * 30) + 3;\n      this.lastValue = value;\n      setTimeout(() => {\n        this.values.fill(3);\n      }, 1000);\n    }\n  }\n\n}\n\nSoundVisualizerComponent.ɵfac = function SoundVisualizerComponent_Factory(t) {\n  return new (t || SoundVisualizerComponent)(i0.ɵɵdirectiveInject(i1.MediaService));\n};\n\nSoundVisualizerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SoundVisualizerComponent,\n  selectors: [[\"app-sound-visualizer\"]],\n  inputs: {\n    mediaStream: \"mediaStream\"\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"d-flex\", \"flex-row\", \"align-items-end\"], [4, \"ngFor\", \"ngForOf\"], [1, \"lines\", 3, \"ngStyle\"]],\n  template: function SoundVisualizerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, SoundVisualizerComponent_ng_container_1_Template, 2, 3, \"ng-container\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.values);\n    }\n  },\n  directives: [i2.NgForOf, i2.NgStyle],\n  styles: [\".lines[_ngcontent-%COMP%] {\\n  background-color: yellow;\\n  width: 5px;\\n  border-top-left-radius: 2px;\\n  border-top-right-radius: 2px;\\n  margin: 0 1px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvdW5kLXZpc3VhbGl6ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx3QkFBQTtFQUNBLFVBQUE7RUFDQSwyQkFBQTtFQUNBLDRCQUFBO0VBQ0EsYUFBQTtBQUNGIiwiZmlsZSI6InNvdW5kLXZpc3VhbGl6ZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubGluZXMge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XG4gIHdpZHRoOiA1cHg7XG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDJweDtcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDJweDtcbiAgbWFyZ2luOiAwIDFweDtcbn0iXX0= */\"]\n});","map":{"version":3,"sources":["/Users/homero/fereg-call/src/app/shared/components/sound-visualizer/sound-visualizer.component.ts","/Users/homero/fereg-call/src/app/shared/components/sound-visualizer/sound-visualizer.component.html"],"names":[],"mappings":";AAEA,SAAS,UAAT,QAA2B,2BAA3B;;;;;;;;;;;;;ACDE,IAAA,EAAA,CAAA,uBAAA,CAAA,CAAA;AACE,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACF,IAAA,EAAA,CAAA,qBAAA;;;;;AADqB,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,EAAA,CAAA,eAAA,CAAA,CAAA,EAAA,GAAA,EAAA,QAAA,CAAA;;;;ADGvB,MAAM,IAAI,GAAG,CAAb;AAMA,OAAM,MAAO,wBAAP,CAA+B;AAWnC,EAAA,WAAA,CAAoB,YAApB,EAA8C;AAA1B,SAAA,YAAA,GAAA,YAAA;AAVpB,SAAA,MAAA,GAAS,IAAI,KAAJ,CAAkB,IAAlB,CAAT;AAEQ,SAAA,KAAA,GAAQ,CAAR;AACA,SAAA,SAAA,GAAY,CAAZ;AAQN,SAAK,MAAL,CAAY,IAAZ,CAAiB,CAAjB;AACD;;AAPuB,MAAX,WAAW,CAAC,KAAD,EAAmB;AACzC,QAAI,KAAJ,EAAW;AACT,WAAK,OAAL,CAAa,KAAb;AACD;AACF;;AAKD,EAAA,QAAQ,GAAA,CAAY;;AAEd,EAAA,OAAO,CAAC,MAAD,EAAoB;AAAA;;AAAA;AAC/B,MAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,UAAJ,CAAe,IAAI,YAAJ,EAAf,CAAlB;;AACA,MAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CACE,MADF,EAEG,OAAD,IAAa,KAAI,CAAC,gBAAL,CAAsB,OAAtB,CAFf,EAGG,KAAD,IAAU;AACR,YAAI,KAAJ,EAAW;AACT,UAAA,OAAO,CAAC,KAAR,CAAc,qBAAd,EAAqC,KAAK,CAAC,OAA3C,EAAoD,KAAK,CAAC,IAA1D;AACD;AACF,OAPH;AAF+B;AAWhC;;AAED,EAAA,WAAW,GAAA;AACT,QAAI,KAAK,UAAT,EAAqB;AACnB,WAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAxB;AACD;AACF;;AAEO,EAAA,gBAAgB,CAAC,KAAD,EAAc;AACpC,QAAI,KAAK,KAAK,KAAK,SAAnB,EAA8B;AAC5B,WAAK,KAAL;;AACA,UAAI,KAAK,KAAL,GAAc,IAAI,GAAG,CAAzB,EAA6B;AAAE,aAAK,KAAL,GAAa,CAAb;AAAiB;;AAChD,WAAK,MAAL,CAAY,KAAK,KAAjB,IAA0B,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,EAAnB,IAAyB,CAAnD;AACA,WAAK,SAAL,GAAiB,KAAjB;AACA,MAAA,UAAU,CAAC,MAAK;AACd,aAAK,MAAL,CAAY,IAAZ,CAAiB,CAAjB;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;AACF;;AA9CkC;;;mBAAxB,wB,EAAwB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,YAAA,C;AAAA,C;;;QAAxB,wB;AAAwB,EAAA,SAAA,EAAA,CAAA,CAAA,sBAAA,CAAA,C;AAAA,EAAA,MAAA,EAAA;AAAA,IAAA,WAAA,EAAA;AAAA,G;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,QAAA,EAAA,UAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,SAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,iCAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;ACXrC,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,gDAAA,EAAA,CAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA;AAGF,MAAA,EAAA,CAAA,YAAA;;;;AAHkC,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,GAAA,CAAA,MAAA","sourcesContent":["import { Component, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { SoundMeter } from '../../../core/sound-meter';\nimport { MediaService } from '../../services/media.service';\n\nconst bars = 4;\n@Component({\n  selector: 'app-sound-visualizer',\n  templateUrl: './sound-visualizer.component.html',\n  styleUrls: ['./sound-visualizer.component.scss']\n})\nexport class SoundVisualizerComponent implements OnInit, OnDestroy {\n  values = new Array<number>(bars);\n  private soundMeter!: SoundMeter;\n  private index = 0;\n  private lastValue = 0;\n\n  @Input() set mediaStream(value: MediaStream) {\n    if (value) {\n      this.connect(value);\n    }\n  }\n  constructor(private mediaService: MediaService) {\n    this.values.fill(3);\n  }\n\n  ngOnInit(): void { }\n\n  async connect(stream: MediaStream): Promise<void> {\n    this.soundMeter = new SoundMeter(new AudioContext());\n    this.soundMeter.connect(\n      stream,\n      (instant) => this.updateVisualizer(instant),\n      (error) => {\n        if (error) {\n          console.error('sound meter error: ', error.message, error.name);\n        }\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this.soundMeter) {\n      this.soundMeter.context.close();\n    }\n  }\n\n  private updateVisualizer(value: number): void {\n    if (value !== this.lastValue) {\n      this.index++;\n      if (this.index > (bars - 1)) { this.index = 0; }\n      this.values[this.index] = Math.floor(value * 30) + 3;\n      this.lastValue = value;\n      setTimeout(() => {\n        this.values.fill(3);\n      }, 1000);\n    }\n  }\n}\n","<div class=\"d-flex flex-row align-items-end\">\n  <ng-container *ngFor=\"let value of values\">\n    <div class=\"lines\" [ngStyle]=\"{'height.px': value}\"></div>\n  </ng-container>\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}