{"ast":null,"code":"import _asyncToGenerator from \"/Users/homero/fereg-call/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { SoundMeter } from '../../../core/sound-meter';\nimport { MediaStreamType } from '../../services/media.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/media.service\";\nconst _c0 = [\"meter\"];\nexport class SoundMeterComponent {\n  constructor(mediaService) {\n    this.mediaService = mediaService;\n  }\n\n  ngAfterViewInit() {\n    this.connect();\n    this.subscription = this.mediaService.selectedAudioInputId.subscribe(id => {\n      if (id) {\n        this.connect(id);\n      }\n    });\n  }\n\n  connect(deviceId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const stream = yield _this.mediaService.getMediaStream(MediaStreamType.audio, undefined, undefined, undefined, deviceId);\n\n      if (!stream) {\n        return;\n      }\n\n      _this.soundMeter = new SoundMeter(new AudioContext());\n\n      _this.soundMeter.connect(stream, instant => _this.meterRef ? _this.meterRef.nativeElement.value = instant : null, error => console.debug('navigator.MediaDevices.getUserMedia error: ', error.message, error.name));\n    })();\n  }\n\n  ngOnDestroy() {\n    var _a;\n\n    if (this.soundMeter) {\n      this.soundMeter.context.close();\n    }\n\n    (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n\n}\n\nSoundMeterComponent.ɵfac = function SoundMeterComponent_Factory(t) {\n  return new (t || SoundMeterComponent)(i0.ɵɵdirectiveInject(i1.MediaService));\n};\n\nSoundMeterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SoundMeterComponent,\n  selectors: [[\"app-sound-meter\"]],\n  viewQuery: function SoundMeterComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.meterRef = _t.first);\n    }\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"high\", \"0.25\", \"max\", \"1\", \"value\", \"0\"], [\"meter\", \"\"]],\n  template: function SoundMeterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"meter\", 0, 1);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzb3VuZC1tZXRlci5jb21wb25lbnQuc2NzcyJ9 */\"]\n});","map":{"version":3,"sources":["/Users/homero/fereg-call/src/app/shared/components/sound-meter/sound-meter.component.ts","/Users/homero/fereg-call/src/app/shared/components/sound-meter/sound-meter.component.html"],"names":[],"mappings":";AAQA,SAAS,UAAT,QAA2B,2BAA3B;AACA,SAAuB,eAAvB,QAA8C,8BAA9C;;;;AAOA,OAAM,MAAO,mBAAP,CAA0B;AAM9B,EAAA,WAAA,CAAoB,YAApB,EAA8C;AAA1B,SAAA,YAAA,GAAA,YAAA;AAA+B;;AAEnD,EAAA,eAAe,GAAA;AACb,SAAK,OAAL;AACA,SAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,oBAAlB,CAAuC,SAAvC,CAAiD,EAAE,IAAG;AACxE,UAAI,EAAJ,EAAQ;AACN,aAAK,OAAL,CAAa,EAAb;AACD;AACF,KAJmB,CAApB;AAKD;;AAEK,EAAA,OAAO,CAAC,QAAD,EAAkB;AAAA;;AAAA;AAC7B,YAAM,MAAM,SAAS,KAAI,CAAC,YAAL,CAAkB,cAAlB,CAAiC,eAAe,CAAC,KAAjD,EAAwD,SAAxD,EAAmE,SAAnE,EAA6E,SAA7E,EAAwF,QAAxF,CAArB;;AACA,UAAI,CAAC,MAAL,EAAa;AACX;AACD;;AACD,MAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,UAAJ,CAAe,IAAI,YAAJ,EAAf,CAAlB;;AACA,MAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,MAAxB,EACG,OAAD,IAAa,KAAI,CAAC,QAAL,GAAgB,KAAI,CAAC,QAAL,CAAc,aAAd,CAA4B,KAA5B,GAAoC,OAApD,GAA8D,IAD7E,EAEG,KAAD,IAAW,OAAO,CAAC,KAAR,CAAc,6CAAd,EAA6D,KAAK,CAAC,OAAnE,EAA4E,KAAK,CAAC,IAAlF,CAFb;AAN6B;AAU9B;;AAED,EAAA,WAAW,GAAA;;;AACT,QAAI,KAAK,UAAT,EAAqB;AACnB,WAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAxB;AACD;;AACD,KAAA,EAAA,GAAA,KAAK,YAAL,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,WAAF,EAAjB;AACD;;AAlC6B;;;mBAAnB,mB,EAAmB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,YAAA,C;AAAA,C;;;QAAnB,mB;AAAmB,EAAA,SAAA,EAAA,CAAA,CAAA,iBAAA,CAAA,C;AAAA,EAAA,SAAA,EAAA,SAAA,yBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;;;;;;AChBhC,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA","sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SoundMeter } from '../../../core/sound-meter';\nimport { MediaService, MediaStreamType } from '../../services/media.service';\n\n@Component({\n  selector: 'app-sound-meter',\n  templateUrl: './sound-meter.component.html',\n  styleUrls: ['./sound-meter.component.scss']\n})\nexport class SoundMeterComponent implements AfterViewInit, OnDestroy {\n\n  @ViewChild(\"meter\") meterRef!: ElementRef;\n  private soundMeter!: SoundMeter;\n  private subscription?: Subscription;\n\n  constructor(private mediaService: MediaService) { }\n\n  ngAfterViewInit() {\n    this.connect();\n    this.subscription = this.mediaService.selectedAudioInputId.subscribe(id => {\n      if (id) {\n        this.connect(id);\n      }\n    });\n  }\n\n  async connect(deviceId?: string) {\n    const stream = await this.mediaService.getMediaStream(MediaStreamType.audio, undefined, undefined,undefined, deviceId);\n    if (!stream) {\n      return;\n    }\n    this.soundMeter = new SoundMeter(new AudioContext());\n    this.soundMeter.connect(stream!,\n      (instant) => this.meterRef ? this.meterRef.nativeElement.value = instant : null,\n      (error) => console.debug('navigator.MediaDevices.getUserMedia error: ', error.message, error.name)\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this.soundMeter) {\n      this.soundMeter.context.close();\n    }\n    this.subscription?.unsubscribe();\n  }\n\n}\n","<meter #meter high=\"0.25\" max=\"1\" value=\"0\"></meter>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}