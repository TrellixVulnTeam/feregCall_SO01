{"ast":null,"code":"import _asyncToGenerator from \"/Users/homero/fereg-call/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-agora-sdk-ng\";\nexport var MediaStreamType;\n\n(function (MediaStreamType) {\n  MediaStreamType[MediaStreamType[\"audio\"] = 0] = \"audio\";\n  MediaStreamType[MediaStreamType[\"video\"] = 1] = \"video\";\n  MediaStreamType[MediaStreamType[\"all\"] = 2] = \"all\";\n})(MediaStreamType || (MediaStreamType = {}));\n\n;\nexport class MediaService {\n  constructor(agoraService) {\n    this.agoraService = agoraService;\n    this.mediaDevicesInfos = [];\n    this.selectedAudioOutputId = new BehaviorSubject('');\n    this.selectedVideoInputId = new BehaviorSubject('');\n    this.selectedAudioInputId = new BehaviorSubject('');\n  }\n\n  set audioInputId(id) {\n    this.selectedAudioInputId.next(id);\n  }\n\n  set audioOutputId(id) {\n    this.selectedAudioOutputId.next(id);\n  }\n\n  set videoInputId(id) {\n    this.selectedVideoInputId.next(id);\n  }\n\n  getMediaSources(kind) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        //await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n        _this.mediaDevicesInfos = yield _this.agoraService.getDevices(); //await navigator.mediaDevices.enumerateDevices();\n      } catch (error) {\n        console.error(error);\n      } finally {\n        return _this.mediaDevicesInfos.filter(mdi => mdi.kind === kind);\n      }\n    })();\n  }\n\n  setSinkID(element, deviceId) {\n    return _asyncToGenerator(function* () {\n      try {\n        yield element.setSinkId(deviceId);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }\n\n  getMediaStream(type, videoWidth, videoHeight, videoDeviceId, audioDeviceId) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const constraints = {\n        audio: false,\n        video: false\n      };\n\n      if (type === MediaStreamType.audio || type === MediaStreamType.all) {\n        constraints.audio = true;\n\n        if (audioDeviceId) {\n          constraints.audio = {\n            deviceId: audioDeviceId\n          };\n        }\n      }\n\n      if (type === MediaStreamType.video || type === MediaStreamType.all) {\n        constraints.video = true;\n\n        if (videoHeight && videoWidth || videoDeviceId) {\n          constraints.video = {\n            width: videoWidth,\n            height: videoHeight,\n            deviceId: videoDeviceId\n          };\n        }\n      }\n\n      try {\n        _this2.lastStream = yield navigator.mediaDevices.getUserMedia(constraints);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        return _this2.lastStream;\n      }\n    })();\n  }\n\n}\n\nMediaService.ɵfac = function MediaService_Factory(t) {\n  return new (t || MediaService)(i0.ɵɵinject(i1.NgxAgoraSdkNgService));\n};\n\nMediaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MediaService,\n  factory: MediaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/homero/fereg-call/src/app/shared/services/media.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { NgxAgoraSdkNgService } from \"ngx-agora-sdk-ng\";\nimport { BehaviorSubject } from \"rxjs\";\n\nexport enum MediaStreamType {\n  audio,\n  video,\n  all\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MediaService {\n  private mediaDevicesInfos: MediaDeviceInfo[] = [];\n  public selectedAudioOutputId = new BehaviorSubject<string>('');\n  public selectedVideoInputId = new BehaviorSubject<string>('');\n  public selectedAudioInputId = new BehaviorSubject<string>('');\n  public lastStream?: MediaStream;\n\n\n  constructor(private agoraService: NgxAgoraSdkNgService) { }\n\n \n  public set audioInputId(id: string) {\n    this.selectedAudioInputId.next(id);\n  }\n   \n  public set audioOutputId(id: string) {\n    this.selectedAudioOutputId.next(id);\n  }\n\n  public set videoInputId(id: string) {\n    this.selectedVideoInputId.next(id);\n  }\n\n  async getMediaSources(kind: MediaDeviceKind) {\n    try {\n      //await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n      this.mediaDevicesInfos = await this.agoraService.getDevices(); //await navigator.mediaDevices.enumerateDevices();\n    } catch (error) {\n      console.error(error);\n    }\n    finally {\n      return this.mediaDevicesInfos.filter(mdi => mdi.kind === kind);\n    }\n  }\n\n  async setSinkID(element: HTMLMediaElement, deviceId: string) {\n    try {\n      await (element as any).setSinkId(deviceId);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getMediaStream(type: MediaStreamType, videoWidth?: number, videoHeight?: number, videoDeviceId?: string, audioDeviceId?: string) {\n    const constraints: MediaStreamConstraints = {\n      audio: false,\n      video: false\n    };\n    if (type === MediaStreamType.audio || type === MediaStreamType.all) {\n      constraints.audio = true;\n      if (audioDeviceId) {\n        constraints.audio = {\n          deviceId: audioDeviceId\n        }\n      }\n    }\n    if (type === MediaStreamType.video || type === MediaStreamType.all) {\n      constraints.video = true;\n      if ((videoHeight && videoWidth) || videoDeviceId) {\n        constraints.video = {\n          width: videoWidth,\n          height: videoHeight,\n          deviceId: videoDeviceId\n        };\n      }\n    }\n    try {\n      this.lastStream = await navigator.mediaDevices.getUserMedia(constraints);\n    } catch (error){\n      console.error(error);\n    }\n    finally {\n      return this.lastStream;\n    }\n  }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}