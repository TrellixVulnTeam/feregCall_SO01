import { __awaiter } from "tslib";
import { EventEmitter, Inject, Injectable } from "@angular/core";
import AgoraRTC from "agora-rtc-sdk-ng";
import { JoinAudioChannel, JoinChannel, JoinVideoChannel } from "./services/channel";
import { AgoraConfig } from "./agora-config";
import * as i0 from "@angular/core";
export class NgxAgoraSdkNgService {
    constructor(config) {
        var _a, _b, _c;
        this.config = config;
        this._onRemoteUserStateEvent = new EventEmitter();
        this._onRemoteUserJoinedEvent = new EventEmitter();
        this._onRemoteUserLeftEvent = new EventEmitter();
        this._onRemoteVolumeIndicatorEvent = new EventEmitter();
        this._onLocalUserJoinedEvent = new EventEmitter();
        this._onLocalUserLeftEvent = new EventEmitter();
        this._onLocalNetworkQualityChangeEvent = new EventEmitter();
        this.agoraClient = AgoraRTC.createClient({
            codec: config.Video ? (_a = config.Video) === null || _a === void 0 ? void 0 : _a.codec : 'h264',
            mode: config.Video ? (_b = config.Video) === null || _b === void 0 ? void 0 : _b.mode : 'rtc',
            role: config.Video ? (_c = config.Video) === null || _c === void 0 ? void 0 : _c.role : 'audience'
        });
        this.agoraClient.on('user-published', (user, mediaType) => __awaiter(this, void 0, void 0, function* () {
            yield this.agoraClient.subscribe(user, mediaType);
            this._onRemoteUserStateEvent.emit({
                mediaType: mediaType,
                connectionState: 'CONNECTED',
                user: {
                    uid: user.uid,
                    hasVideo: user.hasVideo,
                    hasAudio: user.hasAudio,
                    audioTrack: {
                        setVolume: (volume) => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.setVolume(volume); },
                        getVolumeLevel: () => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.getVolumeLevel(); },
                        play: () => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.play(); },
                        getMediaStream: () => { var _a; return new MediaStream([(_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.getMediaStreamTrack()]); }
                    },
                    videoTrack: {
                        play: (element) => { var _a; return (_a = user.videoTrack) === null || _a === void 0 ? void 0 : _a.play(element); },
                        getMediaStream: () => { var _a; return new MediaStream([(_a = user.videoTrack) === null || _a === void 0 ? void 0 : _a.getMediaStreamTrack()]); }
                    }
                }
            });
        }));
        this.agoraClient.on('user-unpublished', user => {
            this._onRemoteUserStateEvent.emit({
                connectionState: 'DISCONNECTED',
                user: {
                    uid: user.uid,
                    hasVideo: user.hasVideo,
                    hasAudio: user.hasAudio,
                    audioTrack: {
                        setVolume: (volume) => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.setVolume(volume); },
                        getVolumeLevel: () => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.getVolumeLevel(); },
                        play: () => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.play(); },
                        getMediaStream: () => { var _a; return new MediaStream([(_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.getMediaStreamTrack()]); }
                    },
                    videoTrack: {
                        play: (element) => { var _a; return (_a = user.videoTrack) === null || _a === void 0 ? void 0 : _a.play(element); },
                        getMediaStream: () => { var _a; return new MediaStream([(_a = user.videoTrack) === null || _a === void 0 ? void 0 : _a.getMediaStreamTrack()]); }
                    }
                }
            });
        });
        this.agoraClient.on('user-joined', (user) => {
            this._onRemoteUserJoinedEvent.emit({
                uid: user.uid,
                hasVideo: user.hasVideo,
                hasAudio: user.hasAudio,
                audioTrack: {
                    setVolume: (volume) => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.setVolume(volume); },
                    getVolumeLevel: () => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.getVolumeLevel(); },
                    play: () => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.play(); },
                    getMediaStream: () => { var _a; return new MediaStream([(_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.getMediaStreamTrack()]); }
                },
                videoTrack: {
                    play: (element) => { var _a; return (_a = user.videoTrack) === null || _a === void 0 ? void 0 : _a.play(element); },
                    getMediaStream: () => { var _a; return new MediaStream([(_a = user.videoTrack) === null || _a === void 0 ? void 0 : _a.getMediaStreamTrack()]); }
                }
            });
        });
        this.agoraClient.on('user-left', (user, reason) => {
            this._onRemoteUserLeftEvent.emit({
                user: {
                    uid: user.uid,
                    hasVideo: user.hasVideo,
                    hasAudio: user.hasAudio,
                    audioTrack: {
                        setVolume: (volume) => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.setVolume(volume); },
                        getVolumeLevel: () => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.getVolumeLevel(); },
                        play: () => { var _a; return (_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.play(); },
                        getMediaStream: () => { var _a; return new MediaStream([(_a = user.audioTrack) === null || _a === void 0 ? void 0 : _a.getMediaStreamTrack()]); }
                    },
                    videoTrack: {
                        play: (element) => { var _a; return (_a = user.videoTrack) === null || _a === void 0 ? void 0 : _a.play(element); },
                        getMediaStream: () => { var _a; return new MediaStream([(_a = user.videoTrack) === null || _a === void 0 ? void 0 : _a.getMediaStreamTrack()]); }
                    }
                },
                reason: reason
            });
        });
        this.agoraClient.enableAudioVolumeIndicator();
        this.agoraClient.on('volume-indicator', (result) => {
            this._onRemoteVolumeIndicatorEvent.emit(result);
        });
        this.agoraClient.on('network-quality', (stats) => {
            this._onLocalNetworkQualityChangeEvent.emit({
                download: stats.downlinkNetworkQuality,
                upload: stats.uplinkNetworkQuality
            });
        });
    }
    join(channelName, token, uid) {
        let joinChannel = new JoinChannel(this.agoraClient, this.config, channelName, token, uid);
        joinChannel.registerUserJoinedEvent(this._onLocalUserJoinedEvent);
        return joinChannel;
    }
    joinVideo(channelName, token, uid) {
        return new JoinVideoChannel(this.agoraClient, this.config, channelName, token, uid);
    }
    joinAudio(channelName, token, uid) {
        return new JoinAudioChannel(this.agoraClient, this.config, channelName, token, uid);
    }
    // remark: review this code.
    leave() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.agoraClient.leave();
            this._onLocalUserLeftEvent.emit();
        });
    }
    getCameras() {
        return AgoraRTC.getCameras();
    }
    getMicrophones() {
        return AgoraRTC.getMicrophones();
    }
    getDevices() {
        return AgoraRTC.getDevices();
    }
    onRemoteUsersStatusChange() {
        return this._onRemoteUserStateEvent.asObservable();
    }
    onRemoteUserJoined() {
        return this._onRemoteUserJoinedEvent.asObservable();
    }
    onRemoteUserLeft() {
        return this._onRemoteUserLeftEvent.asObservable();
    }
    onRemoteVolumeIndicator() {
        return this._onRemoteVolumeIndicatorEvent.asObservable();
    }
    onLocalUserJoined() {
        return this._onLocalUserJoinedEvent.asObservable();
    }
    onLocalUserLeft() {
        return this._onLocalUserLeftEvent.asObservable();
    }
    onLocalNetworkQualityChange() {
        return this._onLocalNetworkQualityChangeEvent.asObservable();
    }
}
NgxAgoraSdkNgService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxAgoraSdkNgService_Factory() { return new NgxAgoraSdkNgService(i0.ɵɵinject("config")); }, token: NgxAgoraSdkNgService, providedIn: "root" });
NgxAgoraSdkNgService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgxAgoraSdkNgService.ctorParameters = () => [
    { type: AgoraConfig, decorators: [{ type: Inject, args: ['config',] }] }
];
//# sourceMappingURL=data:application/json;base64,